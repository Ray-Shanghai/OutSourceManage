package com.sd.farmework.service.impl; 

import java.util.ArrayList;
import java.util.List;

import com.sd.farmework.pojo.SdOrderInfo;
import com.sd.farmework.pojo.SdOrderQuote;
import com.sd.farmework.pojo.SdOrderTrack;
import com.sd.farmework.service.SdOrderQuoteService; 

import org.springframework.stereotype.Service; 

import com.sd.farmework.mapper.SdOrderInfoMapper;
import com.sd.farmework.mapper.SdOrderQuoteMapper; 
import com.sd.farmework.mapper.SdOrderTrackMapper;

import org.springframework.beans.factory.annotation.Autowired; 

/** 
 * test
 * @author Administrator 
 * 
 */ 
 @Service
public class SdOrderQuoteServiceImpl extends BaseInfoServiceImpl implements SdOrderQuoteService{ 
    @Autowired
    private SdOrderQuoteMapper baseMapper;
    @Autowired
    private SdOrderTrackMapper sdOrderTrackMapper;
    @Autowired
    private SdOrderInfoMapper sdOrderInfoMapper;
    public SdOrderQuoteMapper getBaseMapper(){
     return baseMapper;
    }
    public void setBaseMapper(SdOrderQuoteMapper baseMapper){
    	this.baseMapper = baseMapper;
    }
	@Override
	public void addOrderQuote(SdOrderQuote sdOrderQuote) throws Exception {
		//添加供应商报价信息
		String[] providerIds= sdOrderQuote.getproviderId().split(",");
		String[] providerNames=sdOrderQuote.getproviderName().split(",");
		String[] doQuotes=sdOrderQuote.getdoQuote().split(",");
		String[] fileUrls=sdOrderQuote.getfileUrl().split(",");
		String[] fileNames=sdOrderQuote.getfileName().split(",");
		List<SdOrderQuote> quoteList=new ArrayList<SdOrderQuote>();
		for (int i = 0; i < providerIds.length; i++) {
			SdOrderQuote sdOrderQuote2=new SdOrderQuote();
			sdOrderQuote2.setorderId(sdOrderQuote.getorderId());
			sdOrderQuote2.setproviderId(providerIds[i]);
			sdOrderQuote2.setproviderName(providerNames[i]);
			sdOrderQuote2.setdoQuote(doQuotes[i]);
			sdOrderQuote2.setfileUrl(fileUrls[i]);
			sdOrderQuote2.setfileName(fileNames[i]);
			sdOrderQuote2.setCreateUserId(sdOrderQuote.getCreateUserId());
			sdOrderQuote2.setCreateUserName(sdOrderQuote.getCreateUserName());
			quoteList.add(sdOrderQuote2);
		}
		this.baseMapper.addBatchForMysql(quoteList);
		//修改订单状态
		SdOrderInfo sdOrderInfo=new SdOrderInfo();
		sdOrderInfo.setorderId(Integer.parseInt(sdOrderQuote.getorderId()));
		sdOrderInfo.setQuoteStatus("Y");
		sdOrderInfo.setLastUpdateUserId(sdOrderQuote.getLastUpdateUserId());
		sdOrderInfo.setLastUpdateUserName(sdOrderQuote.getLastUpdateUserName());
		sdOrderInfo.setdataState("5");
		this.sdOrderInfoMapper.updateForMysql(sdOrderInfo);
		//订单跟踪
		SdOrderTrack sdOrderTrack=new SdOrderTrack();
		sdOrderTrack.setorderId(sdOrderQuote.getorderId()+"");
		sdOrderTrack.setCreateUserId(sdOrderQuote.getLastUpdateUserId());
		sdOrderTrack.setCreateUserName(sdOrderQuote.getLastUpdateUserName());
		sdOrderTrack.setdataState("4");
		sdOrderTrack.setdataStateName("待报价");
		sdOrderTrackMapper.addForMysql(sdOrderTrack);
	}
	@Override
	public void updateOrderQuote(SdOrderQuote sdOrderQuote) throws Exception {
		//修改报价信息
		sdOrderQuote.setisMake("1");
		sdOrderQuote.setorderAssignId(sdOrderQuote.getCreateUserId());
		this.baseMapper.updateForMysql(sdOrderQuote);
		//订单跟踪
		SdOrderTrack sdOrderTrack=new SdOrderTrack();
		sdOrderTrack.setorderId(sdOrderQuote.getorderId()+"");
		sdOrderTrack.setCreateUserId(sdOrderQuote.getLastUpdateUserId());
		sdOrderTrack.setCreateUserName(sdOrderQuote.getLastUpdateUserName());
		sdOrderTrack.setdataState("5");
		sdOrderTrack.setdataStateName("报价核定");
		sdOrderTrackMapper.addForMysql(sdOrderTrack);
		//修改订单信息
		SdOrderInfo sdOrderInfo=new SdOrderInfo();
		sdOrderInfo.setorderId(Integer.parseInt(sdOrderQuote.getorderId()));
		sdOrderInfo.setLastUpdateUserId(sdOrderQuote.getLastUpdateUserId());
		sdOrderInfo.setLastUpdateUserName(sdOrderQuote.getLastUpdateUserName());
		sdOrderInfo.setdataState("6");
		this.sdOrderInfoMapper.updateForMysql(sdOrderInfo);
	}
}