package com.sd.farmework.controller; 

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sd.farmework.service.SdOrderInfoService; 
import com.sd.farmework.service.SdOrderTrackService;
import com.sd.farmework.pojo.SdOrderDetailInfo;
import com.sd.farmework.pojo.SdOrderInfo; 
import com.sd.farmework.pojo.SdOrderTrack;
import com.sd.farmework.pojo.SdProductInfo;
import com.sd.farmework.pojo.SysUserInfo;
import com.sd.farmework.common.BaseInfo;
import com.sd.farmework.common.HttpSessionProvider;
import com.sd.farmework.common.JSONUtils;
import com.sd.farmework.common.util.StringUtil;

import net.sf.json.JSONArray;

import org.apache.log4j.Logger;
import org.springframework.ui.Model;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import  javax.servlet.http.HttpServletRequest;
import  javax.servlet.http.HttpServletResponse;
import  javax.servlet.http.HttpSession;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
/** 
 * test
 * @author Administrator 
 * 
 */ 
 @Controller
 @Scope("prototype")
 @RequestMapping(value="/manager/loginIn/SdOrderInfo")
public class SdOrderInfoController{ 
    @Autowired
    private SdOrderInfoService sdorderinfoService;
    /**
    * 添加订单
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/add",method = RequestMethod.POST)
    public String  add(HttpSession session,HttpServletRequest request,HttpServletResponse response,
    		SdOrderInfo sdorderinfo,SdOrderDetailInfo sdOrderDetailInfo,SdProductInfo sdProductInfo, Model model){
		try {
			System.out.println(sdorderinfo.toString());
			System.out.println(sdOrderDetailInfo.toString());
			System.out.println(sdProductInfo.toString());
			HttpSessionProvider  sessionProvider= new HttpSessionProvider();
			sdProductInfo=(SdProductInfo) sessionProvider.fillBaseInfo(sdProductInfo, session, request, response);
			sdorderinfo=(SdOrderInfo) sessionProvider.fillBaseInfo(sdorderinfo, session, request, response);
			sdOrderDetailInfo=(SdOrderDetailInfo)sessionProvider.fillBaseInfo(sdOrderDetailInfo, session, request, response);
			//添加操作
			this.sdorderinfoService.addOrder(sdorderinfo, sdOrderDetailInfo, sdProductInfo);
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
		return null;
	}
    /**
    * 订单确认
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/confirmOrder",method = RequestMethod.POST)
    public String  update(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
		try {
			HttpSessionProvider  sessionProvider= new HttpSessionProvider();
			sdorderinfo=(SdOrderInfo) sessionProvider.fillBaseInfo(sdorderinfo, session, request, response);
			this.sdorderinfoService.comfirmOrderInfo(sdorderinfo);
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
		return null;
	}
    /**
    * 修改
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/delete",method = RequestMethod.POST)
    public String  delete(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
		try {
			sdorderinfoService.delete(sdorderinfo);	
		} catch (Exception e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
    /**
    * 查询不分页列表
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/queryList",method = RequestMethod.POST)
    public String  queryList(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
		try {
			sdorderinfoService.queryList(sdorderinfo);	
		} catch (Exception e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
    /**
    * 查询分页列表
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param mark 标记这条请求的来源位置
    * @param model
    * @return
    */
    @ResponseBody
    @RequestMapping(value = "/queryListByPage",method = RequestMethod.POST)
    public void  queryListByPage(HttpSession session,HttpServletRequest request,HttpServletResponse response,
    		SdOrderInfo sdorderinfo,Model model,int pageIndex,int pageSize,String mark){
		try {
			//取出当前用户信息
			HttpSessionProvider sessionProvider=new HttpSessionProvider();
			SysUserInfo user=sessionProvider.getCurrentUserSession(session, request, response);
			if(StringUtil.isNotNullOrBlank(mark)&&mark.equals("assignOrder")){
				if(user.getPosition().equals("2")){//采购经理
					sdorderinfo.setdataState("3");
					sdorderinfo.setprocurementUserId(user.getUserId());//采购经理
				}else if(user.getPosition().equals("3")){//检验经理
					sdorderinfo.setdataState("6");
					sdorderinfo.setcheckoutUserId(user.getUserId());
				}else{//不展示指派数据
					sdorderinfo.setdataState("N");
					sdorderinfo.setprocurementUserId("N");
					sdorderinfo.setcheckoutUserId("N");
				}
			}
			/*if(StringUtil.isNotNullOrBlank(mark)&&mark.equals("listOrder")){//订单列表不显示3，6状态订单
				sdorderinfo.setStatus("Y");
			}*/
			sdorderinfo.setCurrPage(pageIndex);
			sdorderinfo.setPageSize(pageSize);
			List<BaseInfo> list=sdorderinfoService.queryListByPage(sdorderinfo);
			
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("count", sdorderinfoService.queryCount(sdorderinfo));
			map.put("code", 0);
			map.put("rows", JSONArray.fromObject(list));
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
	}
    
    
    /**
     * 订单跟踪列表
     * @param session
     * @param request
     * @param response
     * @param SysApprovenFunction
     * @param model
     * @return
     */
     @ResponseBody
     @RequestMapping(value = "/queryListByTrack",method = RequestMethod.POST)
     public void  queryListByTrack(HttpSession session,HttpServletRequest request,HttpServletResponse response,
     		SdOrderInfo sdorderinfo,Model model,int pageIndex,int pageSize){
 		try {
 			//取出当前用户信息
 			/*HttpSessionProvider sessionProvider=new HttpSessionProvider();
 			SysUserInfo user=sessionProvider.getCurrentUserSession(session, request, response);*/
 			sdorderinfo.setCurrPage(pageIndex);
 			sdorderinfo.setPageSize(pageSize);
 			List<SdOrderInfo> list=sdorderinfoService.queryListByTrack(sdorderinfo);
 			
 			Map<String,Object> map = new HashMap<String,Object>();
 			map.put("count", sdorderinfoService.queryCountByTrack(sdorderinfo));
 			map.put("code", 0);
 			map.put("rows", JSONArray.fromObject(list));
 			
 			JSONUtils.objectToJson(request, response, map);
 		} catch (Exception e) {
 			e.printStackTrace();
 			Map<String,String> map = new HashMap<String,String>();
 			map.put("code", "001");
 			map.put("msg", "系统繁忙");
 			JSONUtils.objectToJson(request, response, map);
 		}
 	}
    /**
    * 通过订单主键查询订单详情
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/queryByPkId",method = RequestMethod.POST)
    public String  queryByPkId(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
		try {
			sdorderinfo=(SdOrderInfo) sdorderinfoService.queryByPkId(sdorderinfo.getorderId()+"");
			
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("code", "000");
			map.put("sdorderinfo",sdorderinfo );
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
		return null;
	}
    /**
    * 通过任意条件查询一条信息
    * @param session
    * @param request
    * @param response
    * @param SysApprovenFunction
    * @param model
    * @return
    */
    @RequestMapping(value = "/query",method = RequestMethod.POST)
    public String  query(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
		try {
			sdorderinfoService.query(sdorderinfo);	
		} catch (Exception e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
    /**
     * 状态改变修改订单信息
     * @param session
     * @param request
     * @param response
     * @param sdorderinfo
     * @param model
     */
    @RequestMapping(value="/updateOrder",method=RequestMethod.POST)
    public void updateOrder(HttpSession session,HttpServletRequest request,HttpServletResponse response,SdOrderInfo sdorderinfo,Model model){
    	try {
    		HttpSessionProvider sessionProvider=new HttpSessionProvider();
    		sdorderinfo=(SdOrderInfo) sessionProvider.fillBaseInfo(sdorderinfo, session, request, response);
			sdorderinfoService.editOrder(sdorderinfo);
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("code", "000");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
    }
}