package com.sd.farmework.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sd.farmework.common.BaseInfo;
import com.sd.farmework.common.HttpSessionProvider;
import com.sd.farmework.common.JSONUtils;
import com.sd.farmework.common.MD5Util;
import com.sd.farmework.common.util.StringUtil;
import com.sd.farmework.pojo.Menu;
import com.sd.farmework.pojo.SysFunctionInfo;
import com.sd.farmework.pojo.SysRoleInfo;
import com.sd.farmework.pojo.SysUserInfo;
import com.sd.farmework.pojo.SysUserRole;
import com.sd.farmework.service.SysFunctionInfoService;
import com.sd.farmework.service.SysRoleInfoService;
import com.sd.farmework.service.SysUserInfoService;
import com.sd.farmework.service.SysUserRoleService;

/**
 * 用户信息操作
 * 
 * @author Administrator
 * 
 */
@SuppressWarnings("rawtypes")
@Controller
@Scope("prototype")
@RequestMapping(value = "/manager/loginIn/SysUserInfo")
public class SysUserInfoController {
	private static Logger logger = Logger.getLogger("SysUserInfoController");
	@Autowired
	private SysUserInfoService SysUserInfoService;
	@Autowired
	private SysFunctionInfoService sysFunctionInfoService;
	@Autowired
	private SysRoleInfoService sysRoleInfoService;
	@Autowired
	private SysUserRoleService sysUserRoleService;
	

	/**
	 * 添加
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public void add(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, SysUserInfo SysUserInfo, String functionIds) {
		try {

			SysUserInfo.setLoginPwd(MD5Util.GetMD5Code(SysUserInfo
					.getLoginPwd()));
			HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
			SysUserInfo = (SysUserInfo) httpSessionProvider.fillBaseInfo(
					SysUserInfo, session, request, response);
			/*SysUserInfo.setAccountType("2");*/
			SysUserInfoService.add(SysUserInfo);
			
			
			if(StringUtil.isNotNullOrBlank(functionIds)&&functionIds.length()>3){
				
				String str [] = functionIds.split(",");
				
				for (String str1:str) {
					if(StringUtil.isNullOrBlank(str1)){
						continue;
					}
					SysUserRole SysUserRole =new  SysUserRole();
					
					SysUserRole.setRoleId(str1);
					SysUserRole.setUserId("000000"+SysUserInfo.getUserId());
					SysUserRole = (SysUserRole) httpSessionProvider.fillBaseInfo(
							SysUserRole, session, request, response);
					sysUserRoleService.add(SysUserRole);
				}
				
			}
			
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
		
	}

	
	
	
	/**
	 * 修改
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/restSetPwd", method = RequestMethod.POST)
	public void restSetPwd(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, SysUserInfo SysUserInfo ) {
		try {
			 
			HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
			SysUserInfo = (SysUserInfo) httpSessionProvider.fillBaseInfo(
					SysUserInfo, session, request, response);
			
			
			SysUserInfo.setLoginPwd(MD5Util.GetMD5Code(SysUserInfo.getLoginPwd()));
			
			
			if(StringUtil.isNullOrBlank(SysUserInfo.getUserId())){
 			 
				SysUserInfo sessionUserInfo = httpSessionProvider
						.getCurrentUserSession(session, request, response);
				SysUserInfo.setUserId(sessionUserInfo.getUserId());
			} 
			
			
			
			
			
			SysUserInfoService.updatePwd(SysUserInfo);
			
			
		 
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙，请稍后再试");
			JSONUtils.objectToJson(request, response, map);
		}
		 
	}
	
	
	
	/**
	 * 修改
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/vildatePwd", method = RequestMethod.POST)
	public void vildatePwd(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, String  pwd ) {
		try {
			 
			HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
			 
			SysUserInfo sysUserInfo =httpSessionProvider.getCurrentUserSession(session, request, response);
			
			if(sysUserInfo.getLoginPwd().equals(MD5Util.GetMD5Code(pwd))){
				Map<String,String> map = new HashMap<String,String>();
				map.put("code", "000");
				map.put("msg", "success");
				JSONUtils.objectToJson(request, response, map);
			}else{
				Map<String,String> map = new HashMap<String,String>();
				map.put("code", "001");
				map.put("msg", "fail");
				JSONUtils.objectToJson(request, response, map);
			}
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙，请稍后再试");
			JSONUtils.objectToJson(request, response, map);
		}
		 
	}
	
	
	
	/**
	 * 修改
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public void update(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, SysUserInfo SysUserInfo, String functionIds,
			String oldloginPwd,String wxStatus) {
		try {
			 
			HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
			SysUserInfo = (SysUserInfo) httpSessionProvider.fillBaseInfo(
					SysUserInfo, session, request, response);
			
			
			boolean isManager = true;
			
			if(StringUtil.isNullOrBlank(SysUserInfo.getUserId())){
				isManager =false;
			 
				SysUserInfo sessionUserInfo = httpSessionProvider
						.getCurrentUserSession(session, request, response);
				SysUserInfo.setUserId(sessionUserInfo.getUserId());
			} 
			if(wxStatus.equals("N")){//如果选中未绑定将openid清空
				SysUserInfo.setWxOpenId("");
			}
			
			SysUserInfoService.update(SysUserInfo);
			
			if(isManager){
				
			
			   sysUserRoleService.delete(SysUserInfo.getUserId());
			
				if(StringUtil.isNotNullOrBlank(functionIds)&&functionIds.length()>3){
					
					String str [] = functionIds.split(",");
					
					for (String str1:str) {
						if(StringUtil.isNullOrBlank(str1)){
							continue;
						}
						SysUserRole SysUserRole =new  SysUserRole();
						
						SysUserRole.setRoleId(str1);
						SysUserRole.setUserId(SysUserInfo.getUserId());
						SysUserRole = (SysUserRole) httpSessionProvider.fillBaseInfo(
								SysUserRole, session, request, response);
						sysUserRoleService.add(SysUserRole);
					}
					
				}
			}
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙，请稍后再试");
			JSONUtils.objectToJson(request, response, map);
		}
		 
	}
	/**
	 * 修改部门权限
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/updateDepartPower", method = RequestMethod.POST)
	public void updateDepartPower(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, SysUserInfo SysUserInfo) {
		try {
			 
			HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
			SysUserInfo = (SysUserInfo) httpSessionProvider.fillBaseInfo(
					SysUserInfo, session, request, response);
			SysUserInfoService.updateDepartPower(SysUserInfo);
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "000");
			map.put("msg", "success");
			JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙，请稍后再试");
			JSONUtils.objectToJson(request, response, map);
		}
	}

	/**
	 * 查询分页列表
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/queryListByPageIndex", method = RequestMethod.POST)
	public String queryListByPageIndex(HttpSession session,
			HttpServletRequest request, HttpServletResponse response,
			SysUserInfo SysUserInfo,int pageIndex,int pageSize) {
		try {
			//pageIndex++;
			SysUserInfo.setPageSize(pageSize);
			SysUserInfo.setCurrPage(pageIndex);
			List list = SysUserInfoService.queryListByPage(SysUserInfo);
			SysUserInfo.setTotalCount(SysUserInfoService.queryCount(SysUserInfo));
			Map<String,Object> map = new HashMap<String,Object>();
			
			map.put("count", SysUserInfo.getTotalCount());
			map.put("code", 0);
			map.put("rows", JSONArray.fromObject(list));
			
			
			
 			JSONUtils.objectToJson(request, response, map);

		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}

		return null;
	}
	/**
	 * 根据条件查询用户不分页
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = RequestMethod.POST)
	public String queryList(HttpSession session,
			HttpServletRequest request, HttpServletResponse response,
			SysUserInfo sysUserInfo) {
		try {
			List list = SysUserInfoService.queryList(sysUserInfo);
			Map<String,Object> map = new HashMap<String,Object>();
			
			map.put("code", "000");
			map.put("rows", JSONArray.fromObject(list));
			
 			JSONUtils.objectToJson(request, response, map);

		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}

		return null;
	}
	/**
	 * 查询采购员信息分页
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/queryListForCaiGou", method = RequestMethod.POST)
	public String queryListByPageForCai(HttpSession session,
			HttpServletRequest request, HttpServletResponse response,
			SysUserInfo SysUserInfo,int pageIndex,int pageSize) {
		try {
			SysUserInfo.setPageSize(pageSize);
			SysUserInfo.setCurrPage(pageIndex);
			List list = SysUserInfoService.queryListByPage(SysUserInfo);
			SysUserInfo.setTotalCount(SysUserInfoService.queryCount(SysUserInfo));
			Map<String,Object> map = new HashMap<String,Object>();
			
			map.put("count", SysUserInfo.getTotalCount());
			map.put("code", 0);
			map.put("rows", JSONArray.fromObject(list));
			
			
			
 			JSONUtils.objectToJson(request, response, map);

		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}

		return null;
	}
	/**
	 * 获取采购人员
	 * @param session
	 * @param request
	 * @param response
	 * @param userNmaes
	 * @param userIds
	 */
	@ResponseBody
	@RequestMapping(value = "/getCaiGou", method = RequestMethod.POST)
	public void getCaiGou(HttpSession session,
			HttpServletRequest request, HttpServletResponse response,
			String userIds){
		try {
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("userIds", userIds);
			String userNames="";
			String userId[]=null;
			if(StringUtil.isNotNullOrBlank(userIds)){
				userId=userIds.split(",");
			}
			for (int i = 0; i < userId.length; i++) {
				SysUserInfo userInfo=(SysUserInfo) this.SysUserInfoService.queryByPkId(userId[i]);
				userNames+=userInfo.getUserName()+",";
			}
		
			map.put("code", "000");
			map.put("userNmaes", userNames);
		JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
	}
	/**
	 * 获取采购经理，检验经理列表
	 * @param session
	 * @param request
	 * @param response
	 */
	@ResponseBody
	@RequestMapping(value = "/getBuyerAndChecker", method = RequestMethod.POST)
	public void getBuyerAndChecker(HttpSession session,
			HttpServletRequest request, HttpServletResponse response
			){
		try {
			Map<String,Object> map = new HashMap<String,Object>();
			SysUserInfo user1=new SysUserInfo();
			SysUserInfo user2=new SysUserInfo();
			user1.setPosition("2");
			user2.setPosition("3");
			List<SysUserInfo> buyerUsers=this.SysUserInfoService.queryList(user1);
			List<SysUserInfo> checkerUsers=this.SysUserInfoService.queryList(user2);
			map.put("code", "000");
			map.put("buyerUsers", buyerUsers);
			map.put("checkerUsers", checkerUsers);
		JSONUtils.objectToJson(request, response, map);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String,String> map = new HashMap<String,String>();
			map.put("code", "001");
			map.put("msg", "系统繁忙");
			JSONUtils.objectToJson(request, response, map);
		}
	}
	 
	
	/**
	 * 登录
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/queryByPkId", method = RequestMethod.POST)
	public void queryByPkId(HttpSession session, HttpServletRequest request,
			HttpServletResponse response, String userId) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", "LOGIN_0000");
		map.put("msg", "success");

		try {
			if(StringUtil.isNullOrBlank(userId)){
				
				HttpSessionProvider httpSessionProvider = new HttpSessionProvider();
				SysUserInfo sessionUserInfo = httpSessionProvider
						.getCurrentUserSession(session, request, response);
				
				SysUserInfo sysUserInfo = (SysUserInfo) SysUserInfoService.queryByPkId(sessionUserInfo.getUserId());
				map.put("sysUserInfo", sysUserInfo);
			}else{
				SysUserInfo sysUserInfo = (SysUserInfo) SysUserInfoService.queryByPkId(userId);
				map.put("sysUserInfo", sysUserInfo);
				
			}
			
			
			 
			JSONUtils.objectToJson(request, response, map);

		} catch (Exception e) {
			e.printStackTrace();

			map.put("code", "LOGIN_0004");
			map.put("msg", "系统繁忙，请稍后再试。");

			JSONUtils.objectToJson(request, response, map);

		}

	}
	
	 
 
	  

	/**
	 * 查询分页列表
	 * 
	 * @param session
	 * @param request
	 * @param response
	 * @param SysApprovenFunction
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/getDepartInfoByParentId", method = RequestMethod.POST)
	public String getDepartInfoByParentId(String userId, HttpSession session,
			HttpServletRequest request, HttpServletResponse response,
			Model model, int page) {
		try {
			SysUserInfo sysUserInfo = new SysUserInfo();
			sysUserInfo.setPageSize(15);
			sysUserInfo.setCurrPage(page);
			int count = sysRoleInfoService
					.queryUserRoleByUserIdCount(sysUserInfo);
			List list = sysRoleInfoService.queryUserRoleByUserId(sysUserInfo);
			// {total:15,rows:[{name:'test',age:12},{name:'test2',age:18}]}
			Map<String,Object> map = new HashMap<String,Object>();
			map.put("total", count);
			map.put("rows", JSONArray.fromObject(list));
			JSONObject ojb = JSONObject.fromObject(map);
			response.setCharacterEncoding("utf-8");
			response.getWriter().write(ojb.toString());

			response.getWriter().close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}